{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/louis/Documents/instant-demo/Documents/instant-demo/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { id, i, init, type InstaQLEntity } from \"@instantdb/react\";\n\n// ID for app: finance-app\nconst APP_ID = \"e1067022-0a5c-472c-a97b-b3caf26ac02d\";\n\n\n// finance schema\nconst financeSchema = i.schema({\n  entities: {\n    finances: i.entity({\n      description: i.string(),\n      transactionAmount: i.number(),\n      transactionCost: i.number(),\n      paidOn: i.date(),\n    })\n  }\n})\n\ntype Finance = InstaQLEntity<typeof financeSchema, \"finances\">;\n\nconst financeDb = init({ appId: APP_ID, financeSchema });\n\n\n// Optional: Declare your schema!\nconst schema = i.schema({\n  entities: {\n    todos: i.entity({\n      text: i.string(),\n      done: i.boolean(),\n      createdAt: i.number(),\n    }),\n  },\n});\n\n\n// function App() {\n//   // Read Data\n//   const { isLoading, error, data } = db.useQuery({ todos: {} });\n//   if (isLoading) {\n//     return;\n//   }\n//   if (error) {\n//     return <div className=\"text-red-500 p-4\">Error: {error.message}</div>;\n//   }\n//   const { todos } = data;\n//   return (\n//     <div className=\"font-mono min-h-screen flex justify-center items-center flex-col space-y-4\">\n//       <h2 className=\"tracking-wide text-5xl text-gray-300\">todos</h2>\n//       <div className=\"border border-gray-300 max-w-xs w-full\">\n//         <TodoForm todos={todos} />\n//         <TodoList todos={todos} />\n//         <ActionBar todos={todos} />\n//       </div>\n//       <div className=\"text-xs text-center\">\n//         Open another tab to see todos update in realtime!\n//       </div>\n//     </div>\n//   );\n// }\n\n// Write Data\n// ---------\n// function addTodo(text: string) {\n//   db.transact(\n//     db.tx.todos[id()].update({\n//       text,\n//       done: false,\n//       createdAt: Date.now(),\n//     })\n//   );\n// }\n\n// function deleteTodo(todo: Todo) {\n//   db.transact(db.tx.todos[todo.id].delete());\n// }\n\n// function toggleDone(todo: Todo) {\n//   db.transact(db.tx.todos[todo.id].update({ done: !todo.done }));\n// }\n\n// function deleteCompleted(todos: Todo[]) {\n//   const completed = todos.filter((todo) => todo.done);\n//   const txs = completed.map((todo) => db.tx.todos[todo.id].delete());\n//   db.transact(txs);\n// }\n\n// function toggleAll(todos: Todo[]) {\n//   const newVal = !todos.every((todo) => todo.done);\n//   db.transact(\n//     todos.map((todo) => db.tx.todos[todo.id].update({ done: newVal }))\n//   );\n// }\n\n\n// Components\n// ----------\n// function ChevronDownIcon() {\n//   return (\n//     <svg viewBox=\"0 0 20 20\">\n//       <path\n//         d=\"M5 8 L10 13 L15 8\"\n//         stroke=\"currentColor\"\n//         fill=\"none\"\n//         strokeWidth=\"2\"\n//       />\n//     </svg>\n//   );\n// }\n\n// function TodoForm({ todos }: { todos: Todo[] }) {\n//   return (\n//     <div className=\"flex items-center h-10 border-b border-gray-300\">\n//       <button\n//         className=\"h-full px-2 border-r border-gray-300 flex items-center justify-center\"\n//         onClick={() => toggleAll(todos)}\n//       >\n//         <div className=\"w-5 h-5\">\n//           <ChevronDownIcon />\n//         </div>\n//       </button>\n//       <form\n//         className=\"flex-1 h-full\"\n//         onSubmit={(e) => {\n//           e.preventDefault();\n//           const input = e.currentTarget.input as HTMLInputElement;\n//           addTodo(input.value);\n//           input.value = \"\";\n//         }}\n//       >\n//         <input\n//           className=\"w-full h-full px-2 outline-none bg-transparent\"\n//           autoFocus\n//           placeholder=\"What needs to be done?\"\n//           type=\"text\"\n//           name=\"input\"\n//         />\n//       </form>\n//     </div>\n//   );\n// }\n\n// function TodoList({ todos }: { todos: Todo[] }) {\n//   return (\n//     <div className=\"divide-y divide-gray-300\">\n//       {todos.map((todo) => (\n//         <div key={todo.id} className=\"flex items-center h-10\">\n//           <div className=\"h-full px-2 flex items-center justify-center\">\n//             <div className=\"w-5 h-5 flex items-center justify-center\">\n//               <input\n//                 type=\"checkbox\"\n//                 className=\"cursor-pointer\"\n//                 checked={todo.done}\n//                 onChange={() => toggleDone(todo)}\n//               />\n//             </div>\n//           </div>\n//           <div className=\"flex-1 px-2 overflow-hidden flex items-center\">\n//             {todo.done ? (\n//               <span className=\"line-through\">{todo.text}</span>\n//             ) : (\n//               <span>{todo.text}</span>\n//             )}\n//           </div>\n//           <button\n//             className=\"h-full px-2 flex items-center justify-center text-gray-300 hover:text-gray-500\"\n//             onClick={() => deleteTodo(todo)}\n//           >\n//             X\n//           </button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// function ActionBar({ todos }: { todos: Todo[] }) {\n//   return (\n//     <div className=\"flex justify-between items-center h-10 px-2 text-xs border-t border-gray-300\">\n//       <div>Remaining todos: {todos.filter((todo) => !todo.done).length}</div>\n//       <button\n//         className=\" text-gray-300 hover:text-gray-500\"\n//         onClick={() => deleteCompleted(todos)}\n//       >\n//         Delete Completed\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default App;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}